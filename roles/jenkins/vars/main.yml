---
mask_passwords:
  password_pair: {}
  mask_regex:
    - .*password.*
    - .*passwd.*

000__jenkins_global_configuration_jcasc:
  jenkins:
    systemMessage: |-
      <div>
          <img style="float: left; margin: 0px 15px 15px 0px;" src="https://jenkins.io/images/logos/JCasC/JCasC.svg" width="100" alt="JCasC">
        	<h2>Welcome to our build server. </h2>
        	<h3>This Jenkins is 100% configured and managed 'as code'.</h3>
          <p>
            <i>Config is now mostly handled by the 'Jenkins Configuration as Code' (JCasC) plugin. <br/>
            JCasC config can be found in the <b>01-jenkins.yaml</b> file in the <b>{{ jenkins_casc_config_path }}</b> folder.</i>
        	</p>
      </div>
    labelString: "jenkins-master {{ jenkins_hostname }} {{ ansible_hostname }}"
    agentProtocols:
      - "JNLP4-connect"
      - "Ping"
    crumbIssuer:
      standard:
        excludeClientIPFromCrumb: true
    markupFormatter: "rawHtml"
    mode: EXCLUSIVE
    myViewsTabBar: "standard"
    primaryView:
      all:
        name: "all"
    numExecutors: "{{ ansible_processor_vcpus*2 }}"
    globalNodeProperties:
    - envVars:
        env:
          - key: "PYTHONUNBUFFERED"
            value: "1"

          - key: "HTTP_PROXY"
            value: |-
              {%- if jenkins_proxy_host and jenkins_proxy_port -%}
                {%- if jenkins_proxy_user and  jenkins_proxy_pass -%}
                  http://{{ jenkins_proxy_user }}:{{ jenkins_proxy_pass }}@{{ jenkins_proxy_host }}:{{ jenkins_proxy_port }}
                {%- else -%}
                  http://{{ jenkins_proxy_host }}:{{ jenkins_proxy_port }}
                {%- endif -%}
              {%- endif -%}

          - key: "HTTPS_PROXY"
            value: "^${HTTP_PROXY}"

          - key: "NO_PROXY"
            value: |-
              {%- if jenkins_proxy_host and jenkins_proxy_port -%}
                {{ jenkins_proxy_exceptions | replace(' ', ',') }}
              {%- endif -%}

    quietPeriod: 5
    scmCheckoutRetryCount: 60
    remotingSecurity:
      enabled: true
    slaveAgentPort: 0

    # securityRealm:
    #   local:
    #     allowsSignup: false
    #     users:
    #      - id: admin
    #        password: admin

    proxy:
      name: "{{ jenkins_proxy_host }}"
      port: "{{ jenkins_proxy_port }}"
      userName: "{{ jenkins_proxy_user }}"
      password: "{{ jenkins_proxy_pass }}"
      noProxyHost: "{{ jenkins_proxy_exceptions | replace(' ', ',') }}"

  security:
    apiToken:
      creationOfLegacyTokenEnabled: false
      tokenGenerationOnCreationEnabled: false
      usageStatisticsEnabled: false
    downloadSettings:
      useBrowser: false
    envInject:
      enableLoadingFromMaster: false
      enablePermissions: false
      hideInjectedVars: false
    globalJobDslSecurityConfiguration:
      useScriptSecurity: false
    sSHD:
      port: -1
    queueItemAuthenticator:
      authenticators:
      - global:
          strategy: "systemAuthorizationStrategy"

  tool:
    git:
      installations:
      - home: "git"
        name: "Default"
    jdk: {}
    groovyInstallation: {}
    customTool: {}

  unclassified:
    extendedEmailPublisher:
      adminRequiredForTemplateTesting: false
      allowUnregisteredEnabled: false
      charset: "UTF-8"
      debugMode: true
      maxAttachmentSize: -1
      maxAttachmentSizeMb: 0
    buildMonitorView:
      permissionToCollectAnonymousUsageStatistics: false
    location:
      adminAddress: "{{ jenkins_email }}"
      url: "{{ jenkins_url }}"
    shell:
      shell: /bin/bash
    mailer:
      adminAddress: "{{ jenkins_email }}"
      charset: "UTF-8"
      useSsl: false
    pollSCM:
      pollingThreadCount: 10
    timestamperConfig:
      allPipelines: true
      elapsedTimeFormat: "'<b>'HH:mm:ss.S'</b> '"
      systemTimeFormat: "'<b>'HH:mm:ss'</b> '"

001__jenkins_global_configuration_installed_plugins_jcasc:
  groovy:
    - script: |
        import jenkins.model.*
        import groovy.json.JsonOutput

        def folder = new File('{{ jenkins_home }}/userContent/')

        if( !folder.exists() ) {
          folder.mkdirs()
        }

        File file = new File("{{ jenkins_home }}/userContent/installed_plugins.json")

        Map<String,String> plugins = new HashMap<>()
        jenkins.model.Jenkins.instance.getPluginManager().getPlugins().each {
          plugins.put((it.getShortName()), it.getVersion().split(' ')[0].toString())
        }

        def json = JsonOutput.prettyPrint(JsonOutput.toJson(plugins))
        file.write(json)

001__jenkins_global_configuration_disable_administrative_monitors_jcasc:
  groovy:
    - script: |
        import jenkins.model.*
        import jenkins.*

        def instance = Jenkins.getInstance()

        def administrativeMonitors = instance.getActiveAdministrativeMonitors()

        administrativeMonitors.each { monitor ->
          monitor.disable(true)
        }

        println("administrativeMonitors: ${instance.administrativeMonitors}")

        for (String m: [
          "jenkins.diagnostics.SecurityIsOffMonitor",
          "jenkins.security.QueueItemAuthenticatorMonitor",
          'hudson.model.UpdateCenter$CoreUpdateMonitor',
          "hudson.diagnosis.ReverseProxySetupMonitor",
          "jenkins.security.UpdateSiteWarningsMonitor",
          "hudson.diagnosis.OldDataMonitor",
          "OldData"
        ]
        ) {
          def mon = instance.getAdministrativeMonitor(m)
          if (mon) {
            println("Disable ${m} administrative monitor")
            mon.disable(true)
          }
        }


001__jenkins_global_configuration_disable_update_sites_jcasc:
  groovy:
    - script: |
        import hudson.model.UpdateSite
        import jenkins.model.Jenkins

        def j = Jenkins.instance
        for(UpdateSite site : j.getUpdateCenter().getSiteList()) {
            site.neverUpdate = true
            site.data = null
            if('setDataLastReadFromFile' in site.metaClass.methods*.name.sort().unique()) {
                site.dataLastReadFromFile = -1
            }
            site.dataTimestamp = 0
            new File(j.getRootDir(), "updates/${site.id}.json").delete()
        }

        System.setProperty('hudson.model.UpdateCenter.never', 'true')


001__jenkins_global_configuration_disable_usage_stat_jcasc:
  groovy:
    - script: |
        import jenkins.model.Jenkins
        def j = Jenkins.instance
        j.setNoUsageStatistics(true)
        j.save()

001__jenkins_global_configuration_configure_project_authenticator_jcasc:
  groovy:
    - script: |
        import jenkins.*
        import jenkins.model.*
        import hudson.model.*
        import jenkins.model.Jenkins
        import org.jenkinsci.plugins.authorizeproject.*
        import org.jenkinsci.plugins.authorizeproject.strategy.*
        import jenkins.security.QueueItemAuthenticatorConfiguration

        def instance = Jenkins.getInstance()

        // Define which strategies you want to allow to be set per project
        def strategyMap = [
          (instance.getDescriptor(AnonymousAuthorizationStrategy.class).getId()): true,
          (instance.getDescriptor(TriggeringUsersAuthorizationStrategy.class).getId()): true,
          (instance.getDescriptor(SpecificUsersAuthorizationStrategy.class).getId()): true,
          (instance.getDescriptor(SystemAuthorizationStrategy.class).getId()): true
        ]

        def authenticators = QueueItemAuthenticatorConfiguration.get().getAuthenticators()
        authenticators.clear()

        println("* Configure Per-Project")
        authenticators.add(new ProjectQueueItemAuthenticator(strategyMap))

        instance.save()

001__jenkins_global_configuration_mask_passwords_jcasc:
  groovy:
    - script: |
        import com.michelin.cio.hudson.plugins.maskpasswords.MaskPasswordsConfig
        import com.michelin.cio.hudson.plugins.maskpasswords.MaskPasswordsBuildWrapper
        import groovy.json.JsonSlurper

        MaskPasswordsConfig plugin = new MaskPasswordsConfig().getInstance()
        def cfg = new JsonSlurper().parseText('{{ mask_passwords | to_json }}')

        plugin.clear()

        cfg.password_pair.each { entry ->
          plugin.addGlobalVarPasswordPair(new MaskPasswordsBuildWrapper.VarPasswordPair(
            entry.key, entry.value
          ))
        }

        cfg.mask_regex.each { entry ->
          plugin.addGlobalVarMaskRegex(new MaskPasswordsBuildWrapper.VarMaskRegex(entry))
        }

        plugin.save(plugin)

        println("Configure Mask Passwords plugin")

001__jenkins_global_configuration_locale_jcasc:
  groovy:
    - script: |
        import hudson.plugins.locale.*
        import jenkins.model.*

        PluginImpl plugin = (PluginImpl) Jenkins.getActiveInstance().getPlugin("locale")
        if (plugin) {
          plugin.setSystemLocale("en_US")
          println("Set locale")
        }
